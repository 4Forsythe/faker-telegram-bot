import bcrypt from 'bcrypt'

import { Markup } from 'telegraf'

export default class CryptoService {
  static async generate(ctx) {
    const value = ctx.session.generateHashOptions.value

    const hash = await bcrypt.hash(value, 10)

    return {
      text: '*üîí –•–µ—à–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...*\n\n' + `${`\`${hash}\``}`,
      options: {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('‚úçüèª –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ', 'hash')],
        ]).resize().reply_markup,
      },
    }
  }

  static async compare(ctx) {
    const hash = ctx.session.compareHashOptions.hash
    const value = ctx.session.compareHashOptions.value

    const isCompare = await bcrypt.compare(value, hash)

    const message = isCompare ? '–•–µ—à *—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç* —Å–æ–æ–±—â–µ–Ω–∏—é' : '–•–µ—à *–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç* —Å–æ–æ–±—â–µ–Ω–∏—é'

    return {
      text: '*üîí –ü—Ä–æ–≤–µ—Ä—è—é —Ö–µ—à...*\n\n' + `${message}`,
      options: {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('‚úçüèª –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ', 'compare')],
        ]).resize().reply_markup,
      },
    }
  }
}
