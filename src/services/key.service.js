import { Markup } from 'telegraf'

import { getRandomKey } from '../lib/utils.js'

export default class KeyService {
  static generate(format, length) {
    const randomKey = getRandomKey(format, length)

    return {
      text:
        '*–°–µ–π—á–∞—Å –ø—Ä–∏–¥—É–º–∞—é!*\n\n' +
        `${`\`${randomKey}\``}\n\n` +
        '–ü–µ—Ä–µ–π–¥—è –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∏–∂–µ, —Ç—ã —Å–º–æ–∂–µ—à—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞',
      options: {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [
            Markup.button.callback('üé≤ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å', 'key_retry'),
            Markup.button.callback('‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã', 'key_options'),
          ],
        ]).resize().reply_markup,
      },
    }
  }

  static options(ctx) {
    const format = ctx.session.generateKeyOptions.format
    const length = ctx.session.generateKeyOptions.length

    return {
      text:
        '*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞:*\n\n' +
        '‚Ä¢ –§–æ—Ä–º–∞—Ç ‚Äî UUID (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑ 32 —Å–∏–º–≤–æ–ª–æ–≤), Nanoid (–±–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)\n' +
        '‚Ä¢ –î–ª–∏–Ω–∞ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ (–æ—Ç 21 –¥–æ 200)',
      options: {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å', 'key')],
          [
            Markup.button.callback(`–§–æ—Ä–º–∞—Ç (${format.toUpperCase()})`, 'select_key_format'),
            Markup.button.callback(`–î–ª–∏–Ω–∞ (${length})`, 'select_key_length'),
          ],
        ]).resize().reply_markup,
      },
    }
  }
}
