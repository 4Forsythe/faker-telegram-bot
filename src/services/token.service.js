import { Markup } from 'telegraf'

import { getRandomToken } from '../lib/utils.js'

export default class TokenService {
  static generate(ctx) {
    const length = ctx.session.generateTokenOptions.length

    const randomToken = getRandomToken(length)

    return {
      text:
        'üç™ –°–µ–π—á–∞—Å –ø—Ä–∏–¥—É–º–∞—é!\n\n' +
        `${randomToken}\n\n` +
        '–ü–µ—Ä–µ–π–¥—è –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∏–∂–µ, —Ç—ã —Å–º–æ–∂–µ—à—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è',
      options: {
        reply_markup: Markup.inlineKeyboard([
          [
            Markup.button.callback('üé≤ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å', 'token_retry'),
            Markup.button.callback('‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã', 'token_options'),
          ],
        ]).resize().reply_markup,
      },
    }
  }

  static options(ctx) {
    const length = ctx.session.generateTokenOptions.length

    return {
      text:
        '*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:*\n\n' +
        '‚Ä¢ –î–ª–∏–Ω–∞ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ (–æ—Ç 1 –¥–æ 500)',
      options: {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å', 'token')],
          [Markup.button.callback(`–î–ª–∏–Ω–∞ (${length})`, 'select_token_length')],
        ]).resize().reply_markup,
      },
    }
  }
}
